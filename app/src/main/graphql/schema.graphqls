type Query {
#    products(first: Int!): ProductConnection
    products(first: Int!, query: String): ProductConnection
    customer(id: ID!): Customer
    codeDiscountNodes(first: Int!): CodeDiscountNodeConnection
    HomeProducts(first: Int!): ProductConnection
}

# Connection type for pagination
type ProductConnection {
    edges: [ProductEdge]
}

# Edge type for pagination
type ProductEdge {
    node: Product
}

# Define the Product type
type Product {
    id: ID!
    title: String!
    description: String
    tags: [String]
    handle: String
    images(first: Int!): ImageConnection
    variants(first: Int!): VariantConnection
}

# Connection type for images
type ImageConnection {
    edges: [ImageEdge]
}

# Edge type for images
type ImageEdge {
    node: Image
}

# Define the Image type
type Image {
    src: String!
}

# Connection type for variants
type VariantConnection {
    edges: [VariantEdge]
}

# Edge type for variants
type VariantEdge {
    node: Variant
}

# Define the Variant type
type Variant {
    price: String!
    sku: String
}
# Define the Customer type
type Mutation {
    customerCreate(input: CustomerInput!): CustomerCreatePayload!
    customerUpdate(input: CustomerInput!): CustomerUpdatePayload!

}

input CustomerInput {
    email: String
    firstName: String
    lastName: String
    phone: String
    tags: [String]
    id: ID
    metafields: [MetafieldInput]
    addresses: [MailingAddressInput]
}

type CustomerCreatePayload {
    customer: Customer
    userErrors: [UserError!]!
}
type Customer {
    id: ID!
    email: String!
    firstName: String
    lastName: String
    phone: String
    address: String
    createdAt: String
    updatedAt: String
    displayName: String
    preferredContactMethod: String
    marketingOptIn: Boolean
    metafields(first: Int): MetafieldConnection
    addresses: [Address]
    defaultAddress: MailingAddress
}
# The type for Mailing Address
type MailingAddress {
    formattedArea: String!
    address1: String!
    address2: String
    city: String
    phone: String
}
type UserError {
    field: [String]
    message: String!
}





# Type for CodesCount
type CodesCount {
    count: Int!
}

# Type for DiscountCodeBasic
type DiscountCodeBasic {
    title: String!
    summary: String!
}

# Type for DiscountCodeBxgy
type DiscountCodeBxgy {
    title: String!
    codesCount: CodesCount!
}

# Union type for DiscountCode
union DiscountCode = DiscountCodeBasic | DiscountCodeBxgy

# Type for CodeDiscountNode
type CodeDiscountNode {
    id: ID!
    codeDiscount: DiscountCode!
}

# Type for CodeDiscountNode connection
type CodeDiscountNodeConnection {
    nodes: [CodeDiscountNode]
}



# The input type for metafields
input MetafieldInput {
    namespace: String!
    key: String!
    value: String!
}

# The input type for addresses
input AddressInput {
    address1: String!
    address2: String!
    city: String!
    phone: String!
}

# The metafield type
type Metafield {
    id: ID!
    namespace: String!
    key: String!
    value: String!
}

# Define Edge type for metafields
type MetafieldEdge {
    node: Metafield!
}

# Define Connection type for metafields
type MetafieldConnection {
    edges: [MetafieldEdge!]!
}


# The input type for Mailing Address
input MailingAddressInput {
    address1: String!
    address2: String!
    city: String!
    phone: String!
}



# The address type
type Address {
    address1: String!
    address2: String!
    city: String!
    phone: String!
}





# The payload for the customer update mutation
type CustomerUpdatePayload {
    customer: Customer
    userErrors: [UserError!]!
}



